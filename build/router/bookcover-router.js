'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _multer = require('multer');

var _multer2 = _interopRequireDefault(_multer);

var _express = require('express');

var _httpErrors = require('http-errors');

var _httpErrors2 = _interopRequireDefault(_httpErrors);

var _bearerAuthMiddleware = require('../lib/middleware/bearer-auth-middleware');

var _bearerAuthMiddleware2 = _interopRequireDefault(_bearerAuthMiddleware);

var _bookcover = require('../model/bookcover');

var _bookcover2 = _interopRequireDefault(_bookcover);

var _s2 = require('../lib/s3');

var _logger = require('../lib/logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// multer is what we use to send files (multipart form data) over HTTP. It will attach a ".files" property to our request object witih metadata about the file we wish to send
var multerUpload = (0, _multer2.default)({ dest: __dirname + '/../temp' });

var bookCoverRouter = new _express.Router();

bookCoverRouter.post('/api/bookcovers', _bearerAuthMiddleware2.default, multerUpload.any(), function (request, response, next) {
  if (!request.account) return next(new _httpErrors2.default(401, 'COVER ROUTER POST ERROR: not authorized'));

  // the files property is an array
  // checking for request.files.length > 1 is only a setting for this lecture code. You are able to attach multiple files at one time and multer collects those files as an array, where request.files would be an array of your attached files. 
  if (!request.body.title || request.files.length > 1) {
    return next(new _httpErrors2.default(400, 'COVER ROUTER POST ERROR: invalid request'));
  }

  // request.files is an array with only one item in it
  // same as const file = requuest.files[0];

  var _request$files = _slicedToArray(request.files, 1),
      file = _request$files[0];
  // these are properties on the "file" we extracted above. Console.log here to see how it looks


  _logger2.default.log(_logger2.default.INFO, 'COVER ROUTER POST: valid file ready to to upload: ' + JSON.stringify(file, null, 2));
  // .filename property is a unique hash generated by multer
  var key = file.filename + '.' + file.originalname;
  return (0, _s2.s3Upload)(file.path, key).then(function (url) {
    _logger2.default.log(_logger2.default.INFO, 'COVER ROUTER POST: received a valid URL from Amazon S3: ' + url);
    // remember, we are returning S3's generated URL after successful upload of our file to the bucket
    return new _bookcover2.default({
      title: request.body.title,
      accountId: request.account._id,
      fileName: key,
      url: url
    }).save();
  }).then(function (newCover) {
    _logger2.default.log(_logger2.default.INFO, 'COVER ROUTER POST: new book cover created: ' + JSON.stringify(newCover, null, 2));
    return response.json(newCover);
  }).catch(next);
});

bookCoverRouter.get('/api/bookcovers/:id?', _bearerAuthMiddleware2.default, function (request, response, next) {
  if (!request.account) return next(new _httpErrors2.default(401), 'COVER ROUTER GET: invalid request');
  if (!request.params.id) return next(new _httpErrors2.default(400, 'COVER ROUTER GET: no id provided'));

  // findById is NOT a method that works in a pre/post hook, so choose queries wisely if you intend to use those hooks in project week
  return _bookcover2.default.findById(request.params.id).then(function (cover) {
    if (!cover) return next(new _httpErrors2.default(404, 'COVER ROUTER GET: no book cover found in database'));
    _logger2.default.log(_logger2.default.INFO, 'COVER ROUTER GET: successfully found book cover ' + JSON.stringify(cover, null, 2));
    return response.json(cover);
  }).catch(next);
});

// TODO: write a coverRouter.delete here
bookCoverRouter.delete('/api/bookcovers/:id?', _bearerAuthMiddleware2.default, function (request, response, next) {
  if (!request.account) return next(new _httpErrors2.default(401), 'COVER ROUTER DELETE: invalid request');
  if (!request.params.id) return next(new _httpErrors2.default(400, 'COVER ROUTER DELETE: no id provided'));

  // findById is NOT a method that works in a pre/post hook, so choose queries wisely if you intend to use those hooks in project week
  return _bookcover2.default.findById(request.params.id).then(function (cover) {
    if (!cover) return next(new _httpErrors2.default(404, 'COVER ROUTER DELETE: book cover not found in database'));
    var key = cover.fileName;
    return (0, _s2.s3Remove)(key);
  }).then(function (result) {
    _logger2.default.log(_logger2.default.INFO, 'COVER ROUTER DELETE: successfully deleted book cover ' + JSON.stringify(result, null, 2));
    return response.json(result);
  }).catch(next);
});

exports.default = bookCoverRouter;